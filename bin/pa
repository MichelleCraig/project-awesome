#!/usr/bin/env node

var program = require('commander');
var projectAwesome = require('../');
var stdinjson = require('./stdinjson');

program
  .version('0.0.1')
  //.option('-C, --chdir <path>', 'change the working directory')
  //.option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')
  //.option('-T, --no-tests', 'ignore test hook')


program
  .command('check <type> <value>')
  .description('Checks if value is valid.')
  .action(function(type, value, options) {
    try {
      process.stdout.write(projectAwesome.check(type, value) + "\n");
    } catch (err) {
      process.stderr.write(err + "\n");
    }
  });

program
  .command('generate <type> <seed>')
  .description('Generates given type.')
  .action(function(type, seed, options) {
    stdinjson.input().then(function(qd) {
      var quiz = projectAwesome.generate(type, qd, seed);
      if (typeof quiz === 'object')
        quiz = JSON.stringify(quiz, null, '    ');
      process.stdout.write(quiz + "\n");
    }).catch(function(e) {
      process.stderr.write(e + "\n");
    });
  });

program
  .command('validate <type>')
  .description('Gives validation errors.')
  .action(function(type, options) {
    stdinjson.input().then(function(qd) {
      var validation = projectAwesome.validate(type, qd);
      process.stdout.write(JSON.stringify(validation) + "\n");
    }).catch(function(e) {
      process.stderr.write(e + "\n");
    });
  });

program
  .command('setup [env]')
  .description('run setup commands for all envs')
  .option("-s, --setup_mode [mode]", "Which setup mode to use")
  .action(function(env, options){
    var mode = options.setup_mode || "normal";
    env = env || 'all';
    console.log('setup for %s env(s) with %s mode', env, mode);
  });

program.parse(process.argv);

